// Package os implements os interface for anko script.
package os

import (
	pkg "os"
	"reflect"

	envir "github.com/covrom/gonec/env"
)

func Import(env *envir.Env) *envir.Env {
	m := env.NewPackage("os")
	m.DefineS("Args", pkg.Args)
	m.DefineS("Chdir", pkg.Chdir)
	m.DefineS("Chmod", pkg.Chmod)
	m.DefineS("Chown", pkg.Chown)
	m.DefineS("Chtimes", pkg.Chtimes)
	m.DefineS("Clearenv", pkg.Clearenv)
	m.DefineS("Create", pkg.Create)
	m.DefineS("DevNull", pkg.DevNull)
	m.DefineS("Environ", pkg.Environ)
	m.DefineS("ErrExist", pkg.ErrExist)
	m.DefineS("ErrInvalid", pkg.ErrInvalid)
	m.DefineS("ErrNotExist", pkg.ErrNotExist)
	m.DefineS("ErrPermission", pkg.ErrPermission)
	m.DefineS("Exit", pkg.Exit)
	m.DefineS("Expand", pkg.Expand)
	m.DefineS("ExpandEnv", pkg.ExpandEnv)
	m.DefineS("FindProcess", pkg.FindProcess)
	m.DefineS("Getegid", pkg.Getegid)
	m.DefineS("Getenv", pkg.Getenv)
	m.DefineS("Geteuid", pkg.Geteuid)
	m.DefineS("Getgid", pkg.Getgid)
	m.DefineS("Getgroups", pkg.Getgroups)
	m.DefineS("Getpagesize", pkg.Getpagesize)
	m.DefineS("Getpid", pkg.Getpid)
	handleAppEngine(m)
	m.DefineS("Getuid", pkg.Getuid)
	m.DefineS("Getwd", pkg.Getwd)
	m.DefineS("Hostname", pkg.Hostname)
	m.DefineS("Interrupt", pkg.Interrupt)
	m.DefineS("IsExist", pkg.IsExist)
	m.DefineS("IsNotExist", pkg.IsNotExist)
	m.DefineS("IsPathSeparator", pkg.IsPathSeparator)
	m.DefineS("IsPermission", pkg.IsPermission)
	m.DefineS("Kill", pkg.Kill)
	m.DefineS("Lchown", pkg.Lchown)
	m.DefineS("Link", pkg.Link)
	m.DefineS("Lstat", pkg.Lstat)
	m.DefineS("Mkdir", pkg.Mkdir)
	m.DefineS("MkdirAll", pkg.MkdirAll)
	m.DefineS("ModeAppend", pkg.ModeAppend)
	m.DefineS("ModeCharDevice", pkg.ModeCharDevice)
	m.DefineS("ModeDevice", pkg.ModeDevice)
	m.DefineS("ModeDir", pkg.ModeDir)
	m.DefineS("ModeExclusive", pkg.ModeExclusive)
	m.DefineS("ModeNamedPipe", pkg.ModeNamedPipe)
	m.DefineS("ModePerm", pkg.ModePerm)
	m.DefineS("ModeSetgid", pkg.ModeSetgid)
	m.DefineS("ModeSetuid", pkg.ModeSetuid)
	m.DefineS("ModeSocket", pkg.ModeSocket)
	m.DefineS("ModeSticky", pkg.ModeSticky)
	m.DefineS("ModeSymlink", pkg.ModeSymlink)
	m.DefineS("ModeTemporary", pkg.ModeTemporary)
	m.DefineS("ModeType", pkg.ModeType)
	m.DefineS("NewFile", pkg.NewFile)
	m.DefineS("NewSyscallError", pkg.NewSyscallError)
	m.DefineS("O_APPEND", pkg.O_APPEND)
	m.DefineS("O_CREATE", pkg.O_CREATE)
	m.DefineS("O_EXCL", pkg.O_EXCL)
	m.DefineS("O_RDONLY", pkg.O_RDONLY)
	m.DefineS("O_RDWR", pkg.O_RDWR)
	m.DefineS("O_SYNC", pkg.O_SYNC)
	m.DefineS("O_TRUNC", pkg.O_TRUNC)
	m.DefineS("O_WRONLY", pkg.O_WRONLY)
	m.DefineS("Open", pkg.Open)
	m.DefineS("OpenFile", pkg.OpenFile)
	m.DefineS("PathListSeparator", pkg.PathListSeparator)
	m.DefineS("PathSeparator", pkg.PathSeparator)
	m.DefineS("Pipe", pkg.Pipe)
	m.DefineS("Readlink", pkg.Readlink)
	m.DefineS("Remove", pkg.Remove)
	m.DefineS("RemoveAll", pkg.RemoveAll)
	m.DefineS("Rename", pkg.Rename)
	m.DefineS("SEEK_CUR", pkg.SEEK_CUR)
	m.DefineS("SEEK_END", pkg.SEEK_END)
	m.DefineS("SEEK_SET", pkg.SEEK_SET)
	m.DefineS("SameFile", pkg.SameFile)
	m.DefineS("Setenv", pkg.Setenv)
	m.DefineS("StartProcess", pkg.StartProcess)
	m.DefineS("Stat", pkg.Stat)
	m.DefineS("Stderr", pkg.Stderr)
	m.DefineS("Stdin", pkg.Stdin)
	m.DefineS("Stdout", pkg.Stdout)
	m.DefineS("Symlink", pkg.Symlink)
	m.DefineS("TempDir", pkg.TempDir)
	m.DefineS("Truncate", pkg.Truncate)

	var v pkg.Signal
	m.DefineTypeS("Signal", reflect.TypeOf(&v).Elem())
	return m
}
